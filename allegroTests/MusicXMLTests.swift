//
//  MusicXMLTests.swift
//  allegro
//
//  Created by Nikhil Lele on 2/18/17.
//  Copyright Â© 2017 gigaunicorn. All rights reserved.
//

import XCTest
@testable import allegro
import Rational
import AEXML

class musicXMLTests: XCTestCase {

    let notes = [
        Note(value: .whole, letter: .C, octave: 4),
        Note(value: .quarter, letter: .A, octave: 4),
        Note(value: .eighth, letter: .G, octave: 4, accidental: .sharp, rest: false),
    ]

    let cases: [(measureIndex: Int, noteIndex: Int, pos: Rational)] = [
        (0, 0, 0),
        (1, 1, 1/4),
        (1, 2, 1/2)
    ]

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.

    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    // test that XML generated by parser matches what is read from disk
//    func testGenerateExample() {
////        let parser = MusicXMLParser()
//        let part = Part()
//        part.title = "Example0" // match example0.xml
//        for c in cases {
//            let _ = part.insert(note: notes[c.noteIndex], intoMeasureIndex: c.measureIndex, at: c.pos)
//        }
////        let partDoc = parser.generate(part: part)
//
//        // load from example0.xml
//        let partFileManager = PartFileManager()
//        guard let part2 = partFileManager.bundleLoad(filename: "example0") else {
//            XCTFail("Unable to load")
//            return
//        }
//
//        // check that all notes match
//        for (i,c) in cases.enumerated() {
//            if let note = part2.measures[c.measureIndex].note(at: c.pos) {
//                XCTAssertTrue(note == notes[c.noteIndex], "found note \(i)")
//            } else {
//                XCTFail("Unable to find note \(i)")
//            }
//        }
//
//        // TODO check that XML matches exactly
//    }

    // test that XML saved to disk can be loaded back the same
//    func testSaveLoad() {
//
//        // todo fix because we're not calling extend()
//
//        let part = Part()
//        let partFileManager = PartFileManager()
//        for c in cases {
//            if let pos = part.insert(note: notes[c.noteIndex], intoMeasureIndex: c.measureIndex, at: c.pos) {
//                XCTAssert(pos == c.pos, "failed to insert note at the right pos")
//            } else {
//                XCTFail("failed to insert note")
//            }
//        }
//        partFileManager.saveAs(filename: "test", part: part)
//
//        // re-load the part
//        let part2 = partFileManager.load(forIndex: 0)
//
//        // check that all notes match
//        for (i,c) in cases.enumerated() {
//            if let note = part2.measures[c.measureIndex].note(at: c.pos) {
//                XCTAssertTrue(note == notes[c.noteIndex], "found note \(i)")
//            } else {
//                XCTFail("Unable to find note \(i)")
//            }
//        }
//
//        // TODO check that XML matches exactly
//    }

}
